{"ast":null,"code":"var _jsxFileName = \"/home/dev/Documents/labs/js/reactjs/react-redux-auth/src/components/profile/ProfileGithub.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileGithub = _ref => {\n  _s();\n\n  let {\n    username,\n    getGithubRepos,\n    repos\n  } = _ref;\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-github\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-primary my-1\",\n        children: \"Github Repos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), repos === null ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this) : repos.map(repo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"repo bg-white p-1 my-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: repo.html_url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: repo.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: repo.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"badge badge-primary\",\n              children: [\"Stars: \", repo.stargazers_count]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"badge badge-dark\",\n              children: [\"Watchers: \", repo.watchers_count]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"badge badge-light\",\n              children: [\"Forks: \", repo.forks_count]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this)]\n      }, repo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProfileGithub, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ProfileGithub;\nProfileGithub.profpTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepos\n})(ProfileGithub);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileGithub\");","map":{"version":3,"sources":["/home/dev/Documents/labs/js/reactjs/react-redux-auth/src/components/profile/ProfileGithub.js"],"names":["React","Fragment","useEffect","PropTypes","connect","getGithubRepos","Spinner","ProfileGithub","username","repos","map","repo","html_url","name","description","stargazers_count","watchers_count","forks_count","id","profpTypes","func","isRequired","array","string","mapStateToProps","state","profile"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;;AAEA,MAAMC,aAAa,GAAG,QAAyC;AAAA;;AAAA,MAAxC;AAAEC,IAAAA,QAAF;AAAYH,IAAAA,cAAZ;AAA4BI,IAAAA;AAA5B,GAAwC;AAC7DP,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,cAAc,CAACG,QAAD,CAAd;AACD,GAFQ,EAEN,CAACH,cAAD,CAFM,CAAT;AAIA,sBACE,QAAC,QAAD;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGI,KAAK,KAAK,IAAV,gBACC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADD,GAGCA,KAAK,CAACC,GAAN,CAAWC,IAAD,iBACR;AAAmB,QAAA,SAAS,EAAC,wBAA7B;AAAA,gCACE;AAAA,kCACE;AAAA,mCACE;AACE,cAAA,IAAI,EAAEA,IAAI,CAACC,QADb;AAEE,cAAA,MAAM,EAAC,QAFT;AAGE,cAAA,GAAG,EAAC,qBAHN;AAAA,wBAKGD,IAAI,CAACE;AALR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE;AAAA,sBAAIF,IAAI,CAACG;AAAT;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAaE;AAAA,iCACE;AAAA,oCACE;AAAI,cAAA,SAAS,EAAC,qBAAd;AAAA,oCACUH,IAAI,CAACI,gBADf;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAI,cAAA,SAAS,EAAC,kBAAd;AAAA,uCACaJ,IAAI,CAACK,cADlB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAOE;AAAI,cAAA,SAAS,EAAC,mBAAd;AAAA,oCACUL,IAAI,CAACM,WADf;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA,SAAUN,IAAI,CAACO,EAAf;AAAA;AAAA;AAAA;AAAA,cADF,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CA7CD;;GAAMX,a;;KAAAA,a;AA+CNA,aAAa,CAACY,UAAd,GAA2B;AACzBd,EAAAA,cAAc,EAAEF,SAAS,CAACiB,IAAV,CAAeC,UADN;AAEzBZ,EAAAA,KAAK,EAAEN,SAAS,CAACmB,KAAV,CAAgBD,UAFE;AAGzBb,EAAAA,QAAQ,EAAEL,SAAS,CAACoB,MAAV,CAAiBF;AAHF,CAA3B;;AAMA,MAAMG,eAAe,GAAIC,KAAD,KAAY;AAClChB,EAAAA,KAAK,EAAEgB,KAAK,CAACC,OAAN,CAAcjB;AADa,CAAZ,CAAxB;;AAIA,eAAeL,OAAO,CAACoB,eAAD,EAAkB;AAAEnB,EAAAA;AAAF,CAAlB,CAAP,CAA6CE,aAA7C,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\n\nconst ProfileGithub = ({ username, getGithubRepos, repos }) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos]);\n\n  return (\n    <Fragment>\n      <div className=\"profile-github\">\n        <h2 className=\"text-primary my-1\">Github Repos</h2>\n        {repos === null ? (\n          <Spinner />\n        ) : (\n          repos.map((repo) => (\n            <div key={repo.id} className=\"repo bg-white p-1 my-1\">\n              <div>\n                <h4>\n                  <a\n                    href={repo.html_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {repo.name}\n                  </a>\n                </h4>\n                <p>{repo.description}</p>\n              </div>\n              <div>\n                <ul>\n                  <li className=\"badge badge-primary\">\n                    Stars: {repo.stargazers_count}\n                  </li>\n                  <li className=\"badge badge-dark\">\n                    Watchers: {repo.watchers_count}\n                  </li>\n                  <li className=\"badge badge-light\">\n                    Forks: {repo.forks_count}\n                  </li>\n                </ul>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nProfileGithub.profpTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  repos: state.profile.repos,\n});\n\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\n"]},"metadata":{},"sourceType":"module"}